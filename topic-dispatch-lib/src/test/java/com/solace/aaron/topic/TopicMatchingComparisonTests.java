/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.solace.aaron.topic;

import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.solace.aaron.topic.utils.TestDataGeneratorUtil;

import dev.solace.aaron.topic.TopicUtil;


/** Builds a list of valid subs, builds regex sub patterns, then does speed comparisons of the matching */
public class TopicMatchingComparisonTests {
	    
	static Set<String> topics = new HashSet<>();
	static Set<String> possibleSubs = new HashSet<>();
	static Set<String> validSubs = new HashSet<>();
	static Set<String> regexSubs = new HashSet<>();

	static Map<String,Set<String>> topicMatches = new HashMap<>();
	static Map<String,Set<String>> topicMatchesRegex = new HashMap<>();
	
	
	@BeforeClass
	public static void generatePossibleSubs() {
		System.out.print("Building subs... ");
		for (int i=0; i<10_000; i++) {
			possibleSubs.add(TestDataGeneratorUtil.buildRandomSub(20));
		}
		System.out.print("validating subs... ");
		for (String sub : possibleSubs) {
			if (TopicUtil.validateSub(sub)) validSubs.add(sub);
			if (TopicUtil.validateSubRegex(sub)) regexSubs.add(sub);
		}
		if (validSubs.size() != regexSubs.size()) {
			System.err.println("These are not the same size!?  " + validSubs.size() + " vs. " + regexSubs.size());
			System.exit(1);
		}
		System.out.print("building topics... ");
		for (int i=0; i<1_000; i++) {
			topics.add(TestDataGeneratorUtil.buildRandomTopic(20));
		}
		System.out.println("Done!");
	}
	
	
    @Test
    public void topicMatchValidation() {
    	long start = System.currentTimeMillis();
    	for (String sub : validSubs) {
    		topicMatches.put(sub, new HashSet<>());
    		for (String topic : topics) {
    			if (TopicUtil.topicMatches(topic, sub)) topicMatches.get(sub).add(topic);
    		}
//			System.out.print(".");
    	}
//    	System.out.println("hehlllo?");
    	System.out.println("non-regex matching of " + validSubs.size() + " subs and " + topics.size() + " topics took " + (System.currentTimeMillis()-start) + " ms.");
    	assertTrue("this is true", true);
    }

    @Test
    public void regexTopicMatchValidation() {
    	long start = System.currentTimeMillis();
    	for (String sub : regexSubs) {
    		topicMatchesRegex.put(sub, new HashSet<>());
    		Pattern p = TopicUtil.buildSubRegexPattern(sub);
    		for (String topic : topics) {
    			if (TopicUtil.topicMatchesRegex(topic, p)) topicMatchesRegex.get(sub).add(topic);
    		}
//			System.out.print(".");
    	}
//    	System.out.println("hehlsdfsdfsdfsdfsdfsdfllo?");
    	System.out.println("Regex matching of " + regexSubs.size() + " subs and " + topics.size() + " topics took " + (System.currentTimeMillis()-start) + " ms.");
    	assertTrue("this is true", true);
    }
    
    @AfterClass
    public static void checkSets() {
    	
    	if (topicMatches.equals(topicMatchesRegex)) {
    		System.out.println("Matching results are same");
    	} else {
    		System.out.println("Matching results are different");
    		
    	}
    }
}
